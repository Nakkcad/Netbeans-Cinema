/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package admin;

import Utils.TMDBFetcher;
import com.formdev.flatlaf.FlatDarkLaf;
import dao.FilmDAO;
import java.awt.Color;
import java.awt.HeadlessException;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.awt.Image;
import javax.swing.ImageIcon;
import java.io.File;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.table.DefaultTableModel;
import model.Film;

/**
 *AdminPanel class provides the main administrative interface for managing films.
 * It allows administrators to add, edit, delete, and search for films, as well as access other administrative panels for managing screenings and bookings.
 * @author ACER
 */
public class AdminPanel extends javax.swing.JFrame {

    /**
     * Creates new form AdminPanel
     * Initializes components and loads movie data.
     */
    public AdminPanel() {
        initComponents();
        refreshMovieTable();

    }
    private Film currentFilm; // To track the film being edited
    private boolean isEditMode = false; // To track edit state

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        NORTH = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtTitle = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        cbGenre = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        spnDuration = new javax.swing.JSpinner();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtPosterUrl = new javax.swing.JTextField();
        btnBrowse = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtSynopsis = new javax.swing.JTextArea();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        date_field = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        fetchlinkfield = new javax.swing.JTextArea();
        jLabel9 = new javax.swing.JLabel();
        fetchmoviesbutton = new javax.swing.JButton();
        screeningPanel = new javax.swing.JButton();
        bookingpanel = new javax.swing.JButton();
        tmdbfetchbutton = new javax.swing.JButton();
        CENTER = new javax.swing.JPanel();
        btnAdd = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        lblStatus = new javax.swing.JLabel();
        searchfield = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        SOUTH = new javax.swing.JScrollPane();
        tblMovies = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("CinemaApp - Admin Panel");
        setMinimumSize(new java.awt.Dimension(800, 600));
        setPreferredSize(new java.awt.Dimension(1000, 700));

        NORTH.setBackground(new java.awt.Color(153, 0, 51));
        NORTH.setBorder(javax.swing.BorderFactory.createTitledBorder("Movie Details"));
        NORTH.setPreferredSize(new java.awt.Dimension(1000, 250));

        jLabel1.setText("Title:");
        jLabel1.setPreferredSize(new java.awt.Dimension(80, 25));

        txtTitle.setPreferredSize(new java.awt.Dimension(300, 25));
        txtTitle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTitleActionPerformed(evt);
            }
        });

        jLabel2.setText("Genre:");
        jLabel2.setPreferredSize(new java.awt.Dimension(80, 25));

        cbGenre.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Action", "Comedy", "Drama", "Horror", "Sci-Fi", "Romance", "Thriller" }));
        cbGenre.setPreferredSize(new java.awt.Dimension(200, 25));

        jLabel3.setText("min");
        jLabel3.setPreferredSize(new java.awt.Dimension(80, 25));

        spnDuration.setModel(new javax.swing.SpinnerNumberModel(90, 0, 300, 1));
        spnDuration.setPreferredSize(new java.awt.Dimension(80, 25));

        jLabel4.setText("Duration:");
        jLabel4.setPreferredSize(new java.awt.Dimension(100, 25));

        jLabel5.setText("Poster Image:");
        jLabel5.setPreferredSize(new java.awt.Dimension(80, 25));

        txtPosterUrl.setPreferredSize(new java.awt.Dimension(300, 25));
        txtPosterUrl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPosterUrlActionPerformed(evt);
            }
        });

        btnBrowse.setText("Browse...");
        btnBrowse.setPreferredSize(new java.awt.Dimension(80, 25));
        btnBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrowseActionPerformed(evt);
            }
        });

        jScrollPane1.setPreferredSize(new java.awt.Dimension(600, 100));

        txtSynopsis.setColumns(20);
        txtSynopsis.setRows(5);
        txtSynopsis.setPreferredSize(new java.awt.Dimension(200, 100));
        jScrollPane1.setViewportView(txtSynopsis);

        jLabel6.setText("Synopsis");
        jLabel6.setPreferredSize(new java.awt.Dimension(80, 25));
        jLabel6.setRequestFocusEnabled(false);

        jLabel8.setText("Release Date:");
        jLabel8.setPreferredSize(new java.awt.Dimension(80, 25));

        date_field.setPreferredSize(new java.awt.Dimension(300, 25));
        date_field.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                date_fieldActionPerformed(evt);
            }
        });

        fetchlinkfield.setColumns(20);
        fetchlinkfield.setRows(5);
        jScrollPane2.setViewportView(fetchlinkfield);

        jLabel9.setText("Fetch Link");

        fetchmoviesbutton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        fetchmoviesbutton.setText("Fetch Movies");
        fetchmoviesbutton.setPreferredSize(new java.awt.Dimension(120, 30));
        fetchmoviesbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fetchmoviesbuttonActionPerformed(evt);
            }
        });

        screeningPanel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        screeningPanel.setText("Screening Panel");
        screeningPanel.setPreferredSize(new java.awt.Dimension(120, 30));
        screeningPanel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                screeningPanelActionPerformed(evt);
            }
        });

        bookingpanel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        bookingpanel.setText("Booking Panel");
        bookingpanel.setPreferredSize(new java.awt.Dimension(120, 30));
        bookingpanel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookingpanelActionPerformed(evt);
            }
        });

        tmdbfetchbutton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        tmdbfetchbutton.setText("TMDB fetch");
        tmdbfetchbutton.setPreferredSize(new java.awt.Dimension(120, 30));
        tmdbfetchbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tmdbfetchbuttonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout NORTHLayout = new javax.swing.GroupLayout(NORTH);
        NORTH.setLayout(NORTHLayout);
        NORTHLayout.setHorizontalGroup(
            NORTHLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(NORTHLayout.createSequentialGroup()
                .addGroup(NORTHLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(NORTHLayout.createSequentialGroup()
                        .addGroup(NORTHLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(NORTHLayout.createSequentialGroup()
                                .addGap(23, 23, 23)
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, NORTHLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(NORTHLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(NORTHLayout.createSequentialGroup()
                                .addComponent(txtPosterUrl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnBrowse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(NORTHLayout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(39, 39, 39)
                                .addGroup(NORTHLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(screeningPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(NORTHLayout.createSequentialGroup()
                                        .addComponent(bookingpanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(tmdbfetchbutton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                    .addGroup(NORTHLayout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(NORTHLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(NORTHLayout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cbGenre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(29, 29, 29)
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(spnDuration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(NORTHLayout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(NORTHLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(date_field, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGroup(NORTHLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(NORTHLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(fetchmoviesbutton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, NORTHLayout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        NORTHLayout.setVerticalGroup(
            NORTHLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(NORTHLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(NORTHLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(NORTHLayout.createSequentialGroup()
                        .addGroup(NORTHLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9))
                        .addGap(12, 12, 12)
                        .addComponent(fetchmoviesbutton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(NORTHLayout.createSequentialGroup()
                        .addGroup(NORTHLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(date_field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(NORTHLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbGenre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(spnDuration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(NORTHLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtPosterUrl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnBrowse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(NORTHLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(NORTHLayout.createSequentialGroup()
                                .addComponent(screeningPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(NORTHLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(bookingpanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tmdbfetchbutton, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(NORTH, java.awt.BorderLayout.NORTH);

        CENTER.setBorder(javax.swing.BorderFactory.createTitledBorder("Button"));
        CENTER.setForeground(new java.awt.Color(102, 153, 0));
        CENTER.setMaximumSize(new java.awt.Dimension(32767, 100));
        CENTER.setPreferredSize(new java.awt.Dimension(100, 100));

        btnAdd.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnAdd.setText("Add Movie");
        btnAdd.setPreferredSize(new java.awt.Dimension(120, 30));
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnClear.setText("Clear Form");
        btnClear.setPreferredSize(new java.awt.Dimension(100, 30));
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        btnEdit.setText("Edit");
        btnEdit.setPreferredSize(new java.awt.Dimension(120, 30));
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        btnDelete.setBackground(new java.awt.Color(204, 0, 51));
        btnDelete.setText("Delete");
        btnDelete.setPreferredSize(new java.awt.Dimension(120, 30));
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        lblStatus.setFont(new java.awt.Font("Segoe UI", 2, 12)); // NOI18N
        lblStatus.setText("Operation Status");

        jLayeredPane1.setLayer(lblStatus, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblStatus)
                .addContainerGap())
        );

        searchfield.setPreferredSize(new java.awt.Dimension(200, 25));
        searchfield.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                searchfieldKeyTyped(evt);
            }
        });

        jLabel7.setText("Search");

        javax.swing.GroupLayout CENTERLayout = new javax.swing.GroupLayout(CENTER);
        CENTER.setLayout(CENTERLayout);
        CENTERLayout.setHorizontalGroup(
            CENTERLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CENTERLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(CENTERLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(CENTERLayout.createSequentialGroup()
                        .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(740, Short.MAX_VALUE))
                    .addGroup(CENTERLayout.createSequentialGroup()
                        .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(15, 15, 15)
                        .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(15, 15, 15)
                        .addComponent(btnEdit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(15, 15, 15)
                        .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29))))
        );
        CENTERLayout.setVerticalGroup(
            CENTERLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, CENTERLayout.createSequentialGroup()
                .addContainerGap(7, Short.MAX_VALUE)
                .addGroup(CENTERLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEdit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        getContentPane().add(CENTER, java.awt.BorderLayout.CENTER);

        SOUTH.setPreferredSize(new java.awt.Dimension(850, 300));

        tblMovies.setAutoCreateRowSorter(true);
        tblMovies.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Title", "Genre", "Duration", "Release Date", "Rating", "Poster"
            }
        ));
        tblMovies.setPreferredSize(new java.awt.Dimension(850, 300));
        SOUTH.setViewportView(tblMovies);
        if (tblMovies.getColumnModel().getColumnCount() > 0) {
            tblMovies.getColumnModel().getColumn(0).setPreferredWidth(50);
            tblMovies.getColumnModel().getColumn(1).setPreferredWidth(200);
            tblMovies.getColumnModel().getColumn(2).setPreferredWidth(120);
            tblMovies.getColumnModel().getColumn(3).setPreferredWidth(80);
            tblMovies.getColumnModel().getColumn(4).setPreferredWidth(80);
            tblMovies.getColumnModel().getColumn(5).setPreferredWidth(80);
        }

        getContentPane().add(SOUTH, java.awt.BorderLayout.PAGE_END);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Handles the action when the title text field is used.
     * Moves focus to the genre combo box.
     * @param evt The action event
     */
    private void txtTitleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTitleActionPerformed
        cbGenre.requestFocusInWindow();    }//GEN-LAST:event_txtTitleActionPerformed
    /**
     * Handles the action when the poster URL text field is used.
     * Validates the poster URL format
     * @param evt The action event
     */
    private void txtPosterUrlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPosterUrlActionPerformed
        validatePosterUrl();
    }//GEN-LAST:event_txtPosterUrlActionPerformed
    /**
     * Validates the poster URL format.
     * Shows a warning message if the URL is invalid.
     */
    private void validatePosterUrl() {
        String url = txtPosterUrl.getText().trim();
        if (!url.isEmpty() && !url.matches("^(https?|file)://.*\\.(jpg|jpeg|png|gif)$")) {
            JOptionPane.showMessageDialog(this, """
                                                Invalid image URL/path. Must be:
                                                - Web URL starting with http/https
                                                - Local file path starting with file://
                                                - Must end with .jpg, .jpeg, .png, or .gif""",
                    "Invalid URL", JOptionPane.WARNING_MESSAGE);
            txtPosterUrl.requestFocus();
        }
    }
    /**
     * Handles the action when the browse button is clicked.
     * Opens a file chooser dialog to select a poster image.
     * @param evt The action event
     * @param evt 
     */
    private void btnBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowseActionPerformed
        // Browse button action - select image file
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Select Movie Poster");
        fileChooser.setAcceptAllFileFilterUsed(false);

        // Set image filter
        FileNameExtensionFilter filter = new FileNameExtensionFilter(
                "Image Files", "jpg", "jpeg", "png", "gif");
        fileChooser.addChoosableFileFilter(filter);

        int returnValue = fileChooser.showOpenDialog(this);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            txtPosterUrl.setText(selectedFile.getAbsolutePath());

            // Optional: Show thumbnail preview
            showImagePreview(selectedFile);

        }    }//GEN-LAST:event_btnBrowseActionPerformed
    /**
     * Shows a preview of the selected image file.
     * @param imageFile The image file to preview
     */
    private void showImagePreview(File imageFile) {
        try {
            ImageIcon icon = new ImageIcon(imageFile.getPath());
            Image img = icon.getImage().getScaledInstance(150, 150, Image.SCALE_SMOOTH);
            JOptionPane.showMessageDialog(this,
                    new JLabel(new ImageIcon(img)),
                    "Poster Preview",
                    JOptionPane.PLAIN_MESSAGE);
        } catch (HeadlessException e) {
            JOptionPane.showMessageDialog(this,
                    "Couldn't load image preview",
                    "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    /**
     * Sets the status message with the specified color.
     * Automatically clears the status after 5 seconds.
     * @param message The status message to display
     * @param color The color for the status message
     */
    private void setStatus(String message, Color color) {
        lblStatus.setText(message);
        lblStatus.setForeground(color);

        // Auto-clear status after 5 seconds
        new Timer(5000, e -> {
            lblStatus.setText("Operation Status");
        }) {
            {
                setRepeats(false);
                start();
            }
        };
    }

    /**
     * Handles the action when the add/update button is clicked.
     * Adds a new film or updates an existing one based on edit mode.
     * @param evt The action event
     */
    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // Clear previous status
        lblStatus.setText("Operation Status");

        // Validate inputs
        if (txtTitle.getText().trim().isEmpty()) {
            setStatus("Title is required", Color.RED);
            txtTitle.requestFocus();
            return;
        }

        try {
            FilmDAO filmDAO = new FilmDAO();

            if (isEditMode) {
                // UPDATE EXISTING FILM
                currentFilm.setTitle(txtTitle.getText().trim());
                currentFilm.setGenre(cbGenre.getSelectedItem().toString());
                currentFilm.setDuration((Integer) spnDuration.getValue());
                currentFilm.setSynopsis(txtSynopsis.getText().trim());
                currentFilm.setPosterUrl(txtPosterUrl.getText().trim());
                currentFilm.setReleaseDate(date_field.getText().trim()); // Add this line

                if (filmDAO.updateFilm(currentFilm)) {
                    setStatus("Movie updated successfully!", new Color(0, 150, 0));
                    refreshMovieTable();
                    setStatus("Movie Updated", Color.GREEN);
                    clearForm();
                    exitEditMode();
                } else {
                    setStatus("Failed to update movie", Color.RED);
                }
            } else {
                // ADD NEW FILM
                Film newFilm = new Film();
                newFilm.setTitle(txtTitle.getText().trim());
                newFilm.setGenre(cbGenre.getSelectedItem().toString());
                newFilm.setDuration((Integer) spnDuration.getValue());
                newFilm.setSynopsis(txtSynopsis.getText().trim());
                newFilm.setPosterUrl(txtPosterUrl.getText().trim());
                newFilm.setReleaseDate(date_field.getText().trim());

                if (filmDAO.addFilm(newFilm)) {
                    setStatus("Movie added successfully!", new Color(0, 150, 0));
                    refreshMovieTable();
                    clearForm();
                } else {
                    setStatus("Failed to add movie", Color.RED);
                }
            }
        } catch (Exception e) {
            setStatus("Error: " + e.getMessage(), Color.RED);
        }
    }
    /**
     * Exits edit mode and resets related variables.
     */
    private void exitEditMode() {
        isEditMode = false;
        currentFilm = null;
        btnAdd.setText("Add");
    }//GEN-LAST:event_btnAddActionPerformed
    /**
     * Refreshes the movie table with current data from the database.
     * Retrieves all films and populates the table.
     */
    private void refreshMovieTable() {
        FilmDAO filmDAO = new FilmDAO();
        List<Film> films = filmDAO.getFilms(null);

        DefaultTableModel model = (DefaultTableModel) tblMovies.getModel();
        model.setRowCount(0); // Clear existing data

        for (Film film : films) {
            model.addRow(new Object[]{
                film.getFilmId(),
                film.getTitle(),
                film.getGenre(),
                film.getDuration() + " mins",
                film.getReleaseDate(),
                film.getRating(),
                film.getPosterUrl()
            });
        }
    }
    /**
     * Handles the action when the clear button is clicked.
     * Clears all form fields.
     * @param evt The action event
     */
    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        clearForm();
    }//GEN-LAST:event_btnClearActionPerformed
    /**
     * Clears all form fields and resets the form state.
     */
    private void clearForm() {
        txtTitle.setText("");
        cbGenre.setSelectedIndex(0);
        spnDuration.setValue(90);
        txtPosterUrl.setText("");
        txtSynopsis.setText("");
        date_field.setText(""); // Add this
        txtTitle.requestFocus();
        btnAdd.setText("Add Movie");
        setStatus("Operation Status", Color.GRAY);
    }

    /**
     * Handles the action when the edit button is clicked.
     * Loads the selected film data into the form for editing.
     * @param evt The action event
     */
    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        int selectedRow = tblMovies.getSelectedRow();
        if (selectedRow == -1) {
            setStatus("Please select a movie to edit", Color.ORANGE);
            return;
        }

        // Get selected film ID
        int filmId = (Integer) tblMovies.getValueAt(selectedRow, 0);

        // Load film data into form
        FilmDAO filmDAO = new FilmDAO();
        currentFilm = filmDAO.getFilmById(filmId);

        if (currentFilm != null) {
            txtTitle.setText(currentFilm.getTitle());
            cbGenre.setSelectedItem(currentFilm.getGenre());
            spnDuration.setValue(currentFilm.getDuration());
            txtPosterUrl.setText(currentFilm.getPosterUrl());
            txtSynopsis.setText(currentFilm.getSynopsis());
            date_field.setText(currentFilm.getReleaseDate()); // Add this line

            isEditMode = true;
            btnAdd.setText("Update");
            setStatus("Editing: " + currentFilm.getTitle(), new Color(0, 100, 200));
        }


    }//GEN-LAST:event_btnEditActionPerformed
    /**
     * Handles the action when the delete button is clicked.
     * Confirms deletion with the user and deletes the selected film if confirmed.
     * @param evt The action event
     */
    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        if (isEditMode) {
            setStatus("Finish or cancel editing first", Color.ORANGE);
            return;
        }

        int selectedRow = tblMovies.getSelectedRow();
        if (selectedRow == -1) {
            setStatus("Please select a movie to delete", Color.ORANGE);
            return;
        }

        String movieTitle = (String) tblMovies.getValueAt(selectedRow, 1);
        int confirm = JOptionPane.showConfirmDialog(this,
                "Are you sure you want to delete '" + movieTitle + "'?",
                "Confirm Delete", JOptionPane.YES_NO_OPTION);

        if (confirm == JOptionPane.YES_OPTION) {
            int filmId = (Integer) tblMovies.getValueAt(selectedRow, 0);
            FilmDAO filmDAO = new FilmDAO();

            if (filmDAO.deleteFilm(filmId)) {
                setStatus("Deleted movie: " + movieTitle, new Color(0, 150, 0));
                refreshMovieTable();
            } else {
                setStatus("Failed to delete movie", Color.RED);
            }
        } else {
            setStatus("Delete canceled", Color.GRAY);
        }
    }//GEN-LAST:event_btnDeleteActionPerformed
    /**
     * Handles the key typed event in the search field.
     * Filters the movie table based on the search keyword.
     * @param evt The key event
     */
    private void searchfieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchfieldKeyTyped
        String keyword = searchfield.getText().trim().toLowerCase();
        searchMovie(keyword);
    }//GEN-LAST:event_searchfieldKeyTyped
    /**
     * Handles the action when the date field is used.
     * @param evt The action event
     */
    private void date_fieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_date_fieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_date_fieldActionPerformed
    /**
     * Handles the action when the fetch movies button is clicked.
     * Fetches movie data from TMDB based on the provided links.
     * @param evt The action event
     */
    private void fetchmoviesbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fetchmoviesbuttonActionPerformed
        // TODO add your handling code here:
           String input = fetchlinkfield.getText().trim();
    if (input.isEmpty()) {
        setStatus("Paste TMDB movie links first!", Color.RED);
        return;
    }

    String[] lines = input.split("\\R"); // Split by newline
    TMDBFetcher fetcher = new TMDBFetcher();
    FilmDAO dao = new FilmDAO();

    // Load existing titles (lowercase for case-insensitive matching)
    Set<String> existingTitles = new HashSet<>();
    for (Film f : dao.getFilms(null)) {
        existingTitles.add(f.getTitle().toLowerCase());
    }

    int successCount = 0;
    int skippedCount = 0;

    for (String line : lines) {
        try {
            line = line.trim();
            if (!line.isEmpty() && line.contains("themoviedb.org/movie/")) {
                String[] parts = line.split("/");
                String idPart = parts[parts.length - 1]; // "822119-captain-america..."
                String idStr = idPart.split("-")[0];     // get "822119"
                int movieId = Integer.parseInt(idStr);

                Film film = fetcher.fetchMovieById(movieId);
                if (film != null) {
                    String titleLower = film.getTitle().toLowerCase();

                    if (!existingTitles.contains(titleLower)) {
                        if (dao.addFilm(film)) {
                            successCount++;
                            existingTitles.add(titleLower); // Prevent duplicates within batch
                            System.out.println("✅ Added: " + film.getTitle());
                        }
                    } else {
                        skippedCount++;
                        System.out.println("⏩ Skipped (duplicate): " + film.getTitle());
                    }
                }
            }
        } catch (Exception e) {
            System.err.println("❌ Failed to fetch: " + line + " - " + e.getMessage());
        }
    }

    setStatus("✅ Added: " + successCount + " | ⏩ Skipped: " + skippedCount, new Color(0, 150, 0));
    refreshMovieTable();

    }//GEN-LAST:event_fetchmoviesbuttonActionPerformed

    private void screeningPanelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_screeningPanelActionPerformed
        // TODO add your handling code here:
        AdminPanelForm adminPanelForm = new AdminPanelForm();
        adminPanelForm.setVisible(true);
    }//GEN-LAST:event_screeningPanelActionPerformed

    private void bookingpanelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookingpanelActionPerformed
        // TODO add your handling code here:
        AdminBookingUI adminBookingUI = new AdminBookingUI(this);
        adminBookingUI.setVisible(true);
    }//GEN-LAST:event_bookingpanelActionPerformed

    private void tmdbfetchbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tmdbfetchbuttonActionPerformed
        TMDBFetcher.gui();
    }//GEN-LAST:event_tmdbfetchbuttonActionPerformed

    private void searchMovie(String keyword) {
        FilmDAO filmDAO = new FilmDAO();
        List<Film> films = filmDAO.getFilms(null);

        DefaultTableModel model = (DefaultTableModel) tblMovies.getModel();
        model.setRowCount(0); // Clear existing data

        for (Film film : films) {
            if (film.getTitle().toLowerCase().contains(keyword)
                    || film.getGenre().toLowerCase().contains(keyword)) {

                model.addRow(new Object[]{
                    film.getFilmId(),
                    film.getTitle(),
                    film.getGenre(),
                    film.getDuration() + " mins",
                    film.getReleaseDate(),
                    film.getRating(),
                    film.getPosterUrl()
                });
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AdminPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AdminPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AdminPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AdminPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        try {
            javax.swing.UIManager.setLookAndFeel(new FlatDarkLaf());  // Use FlatLaf
        } catch (UnsupportedLookAndFeelException ex) {
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AdminPanel().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel CENTER;
    private javax.swing.JPanel NORTH;
    private javax.swing.JScrollPane SOUTH;
    private javax.swing.JButton bookingpanel;
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnBrowse;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnEdit;
    private javax.swing.JComboBox<String> cbGenre;
    private javax.swing.JTextField date_field;
    private javax.swing.JTextArea fetchlinkfield;
    private javax.swing.JButton fetchmoviesbutton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JButton screeningPanel;
    private javax.swing.JTextField searchfield;
    private javax.swing.JSpinner spnDuration;
    private javax.swing.JTable tblMovies;
    private javax.swing.JButton tmdbfetchbutton;
    private javax.swing.JTextField txtPosterUrl;
    private javax.swing.JTextArea txtSynopsis;
    private javax.swing.JTextField txtTitle;
    // End of variables declaration//GEN-END:variables
}
