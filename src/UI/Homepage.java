/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package UI;

import com.formdev.flatlaf.FlatDarkLaf;
import javax.swing.UnsupportedLookAndFeelException;
import Utils.UserSession;
import javax.swing.*;
import java.awt.*;
import java.util.List;
import DAO.FilmDAO;
import DAO.PosterDAO;
import java.awt.event.ComponentEvent;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseWheelEvent;
import java.awt.event.MouseWheelListener;
import java.awt.image.BufferedImage;
import java.util.Random;
import model.Film;
import model.MovieDetailsDialog;

/**
 *
 * @author ACER
 */
public class Homepage extends javax.swing.JFrame {

    /**
     * Creates new form MainApp
     */
    public Homepage() {
        initComponents();
        setLocationRelativeTo(null);
        String username = UserSession.getUsername();
        welcome.setText("Welcome, " + username);
        setupScrollingSpeed();

        setupMoviesContainer();
        loadMovieCategoriesInBackground(); // Changed from loadMovies()
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        moviesScrollPane = new javax.swing.JScrollPane();
        moviesContainer = new javax.swing.JPanel();
        Menubar = new javax.swing.JPanel();
        welcome = new javax.swing.JLabel();
        film_searchbar = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("CinemaApp - Homepage");
        setLocation(new java.awt.Point(0, 0));
        setPreferredSize(new java.awt.Dimension(1100, 720));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        moviesScrollPane.setVerifyInputWhenFocusTarget(false);

        moviesContainer.setBackground(new java.awt.Color(102, 0, 0));
        moviesContainer.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));
        moviesContainer.setToolTipText("");
        moviesContainer.setPreferredSize(new java.awt.Dimension(800, 600));
        moviesContainer.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 1, 1));
        moviesScrollPane.setViewportView(moviesContainer);

        getContentPane().add(moviesScrollPane, java.awt.BorderLayout.CENTER);

        Menubar.setBackground(new java.awt.Color(255, 204, 0));
        Menubar.setPreferredSize(new java.awt.Dimension(1080, 50));

        welcome.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        welcome.setForeground(new java.awt.Color(0, 0, 0));
        welcome.setText("Welcome, USER");

        film_searchbar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                film_searchbarKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                film_searchbarKeyTyped(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setText("Search:");

        javax.swing.GroupLayout MenubarLayout = new javax.swing.GroupLayout(Menubar);
        Menubar.setLayout(MenubarLayout);
        MenubarLayout.setHorizontalGroup(
            MenubarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MenubarLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(welcome, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 629, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(film_searchbar, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25))
        );
        MenubarLayout.setVerticalGroup(
            MenubarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, MenubarLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(MenubarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(welcome, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(film_searchbar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addContainerGap())
        );

        getContentPane().add(Menubar, java.awt.BorderLayout.NORTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private Timer searchTimer;

    private boolean isSearchMode = false;

    private void film_searchbarKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_film_searchbarKeyTyped
        // Cancel previous timer if still running
        if (searchTimer != null && searchTimer.isRunning()) {
            searchTimer.stop();
        }

        // Create new timer with 300ms delay
        searchTimer = new Timer(300, e -> {
            performSearch();
        });
        searchTimer.setRepeats(false);
        searchTimer.start();
    }//GEN-LAST:event_film_searchbarKeyTyped

    private void setupScrollingSpeed() {
        // Get the scroll pane's viewport
        JScrollPane scrollPane = moviesScrollPane;

        // Replace the existing mouse wheel listener with this one
        scrollPane.addMouseWheelListener(new MouseWheelListener() {
            @Override
            public void mouseWheelMoved(MouseWheelEvent e) {
                // Only handle vertical scrolling if Shift isn't pressed
                if (!e.isShiftDown()) {
                    // Get the current scroll bar
                    JScrollBar verticalScrollBar = scrollPane.getVerticalScrollBar();

                    // Calculate scroll amount (multiply by factor to increase speed)
                    int scrollAmount = verticalScrollBar.getUnitIncrement() * 3;

                    // Apply the scroll amount based on wheel rotation
                    if (e.getWheelRotation() < 0) {
                        // Scroll up
                        verticalScrollBar.setValue(verticalScrollBar.getValue() - scrollAmount);
                    } else {
                        // Scroll down
                        verticalScrollBar.setValue(verticalScrollBar.getValue() + scrollAmount);
                    }

                    // Consume the event so it doesn't get processed further
                    e.consume();
                }
                // If Shift is pressed, let the horizontal scroll handling in addMovieCategory() take over
            }
        });

        // Keep these increments for smoother scrolling
        scrollPane.getVerticalScrollBar().setUnitIncrement(16);  // Default is usually 1
        scrollPane.getVerticalScrollBar().setBlockIncrement(256); // Default is usually 10
    }
    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // close all window too
        for (Window window : Window.getWindows()) {
            window.dispose();
        }
        new Login().setVisible(true);
    }//GEN-LAST:event_formWindowClosed

    private void film_searchbarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_film_searchbarKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            clearSearch();
        }    }//GEN-LAST:event_film_searchbarKeyPressed

    private void performSearch() {
        String searchText = film_searchbar.getText().toLowerCase().trim();

        // Check if we're entering or exiting search mode
        boolean shouldBeInSearchMode = !searchText.isEmpty();

        if (shouldBeInSearchMode != isSearchMode) {
            // Transition between modes
            isSearchMode = shouldBeInSearchMode;
            setupMoviesContainer(); // Reset the container layout
        }

        // Show loading indicator only in search mode
        if (isSearchMode) {
            moviesContainer.removeAll();
            JLabel loadingLabel = new JLabel("Searching...", SwingConstants.CENTER);
            loadingLabel.setForeground(Color.WHITE);
            loadingLabel.setFont(new Font("SansSerif", Font.PLAIN, 16));
            moviesContainer.add(loadingLabel);
            moviesContainer.revalidate();
        }

        // Perform search in background thread
        new SwingWorker<List<Film>, Void>() {
            @Override
            protected List<Film> doInBackground() throws Exception {
                FilmDAO filmDAO = new FilmDAO();
                return filmDAO.getFilms(null);
            }

            @Override
            protected void done() {
                try {
                    List<Film> allFilms = get();
                    moviesContainer.removeAll();

                    if (!isSearchMode) {
                        // Return to default categories view
                        loadMovieCategoriesInBackground();
                        return;
                    }

                    // Filter movies for search results
                    int matchCount = 0;
                    for (Film film : allFilms) {
                        if (film.getTitle().toLowerCase().contains(searchText)
                                || film.getGenre().toLowerCase().contains(searchText)) {
                            addMovieCard(film);
                            matchCount++;
                        }
                    }

                    // No results message
                    if (matchCount == 0) {
                        showNoResultsMessage(searchText);
                    }

                } catch (Exception ex) {
                    showErrorMessage("Search failed: " + ex.getMessage());
                } finally {
                    moviesContainer.revalidate();
                    moviesContainer.repaint();
                    updateContainerSize();
                    moviesScrollPane.getVerticalScrollBar().setValue(0);
                }
            }
        }.execute();
    }

    private void addMovieCard(Film film) {
        MovieCard card = new MovieCard(film, () -> {
            openMovieDetails(film);
        });

        if (isSearchMode) {
            // In search mode, just add the card directly
            moviesContainer.add(card);
        } else {
            // In category mode, this shouldn't be called directly
            throw new IllegalStateException("addMovieCard should not be called directly in category mode");
        }
    }

    private void showNoResultsMessage(String searchText) {
        JPanel messagePanel = new JPanel(new BorderLayout());
        messagePanel.setBackground(new Color(102, 0, 0));

        JLabel noResults = new JLabel("No movies found matching: '" + searchText + "'", SwingConstants.CENTER);
        noResults.setForeground(Color.WHITE);
        noResults.setFont(new Font("SansSerif", Font.ITALIC, 16));

        JLabel suggestion = new JLabel("Try different keywords", SwingConstants.CENTER);
        suggestion.setForeground(Color.LIGHT_GRAY);
        suggestion.setFont(new Font("SansSerif", Font.PLAIN, 14));

        messagePanel.add(noResults, BorderLayout.CENTER);
        messagePanel.add(suggestion, BorderLayout.SOUTH);
        messagePanel.setBorder(BorderFactory.createEmptyBorder(50, 0, 0, 0));

        moviesContainer.add(messagePanel);
    }

    private void showErrorMessage(String message) {
        JLabel errorLabel = new JLabel(message, SwingConstants.CENTER);
        errorLabel.setForeground(Color.RED);
        errorLabel.setFont(new Font("SansSerif", Font.BOLD, 14));
        moviesContainer.add(errorLabel);
    }

    private void setupMoviesContainer() {
        moviesContainer.removeAll();

        if (isSearchMode) {
            // Search mode - use FlowLayout for grid of results
            moviesContainer.setLayout(new FlowLayout(FlowLayout.LEFT, 15, 15));
        } else {
            // Default mode - use BoxLayout for categories
            moviesContainer.setLayout(new BoxLayout(moviesContainer, BoxLayout.Y_AXIS));
        }

        moviesContainer.setBackground(new Color(102, 0, 0));
        moviesContainer.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
        moviesContainer.setAutoscrolls(true);
    }

// <editor-fold defaultstate="collapsed" desc="unused Code">                          

    private void loadMovieCategories() {
        FilmDAO filmDAO = new FilmDAO();

        // Add Top Rated section
        addMovieCategory("Top Rated Movies", filmDAO.getTopRatedFilms(10));
        addMovieCategory("Newest", filmDAO.getFilmsByNewest(10));
        // Add sections for different genres
        String[] popularGenres = {"Action", "Comedy", "Drama", "Sci-Fi", "Horror"};
        for (String genre : popularGenres) {
            addMovieCategory("Top " + genre, filmDAO.getFilmsByGenre(genre, 10));
        }

        // Add All Movies section
        addMovieCategory("All Movies", filmDAO.getFilms(null));

        // Update container size after adding all categories
        updateContainerSize();
    } // </editor-fold>

    private void loadMovieCategoriesInBackground() {
        SwingWorker<Void, Void> worker = new SwingWorker<>() {
            @Override
            protected Void doInBackground() {
                FilmDAO filmDAO = new FilmDAO();

                addMovieCategory("Scheduled", filmDAO.getAllFilmsWithSchedule());

                // Add Top Rated section
                addMovieCategory("Top Rated Movies", filmDAO.getTopRatedFilms(10));
                addMovieCategory("Newest", filmDAO.getFilmsByNewest(10));

                // Add sections for different genres
                String[] popularGenres = {"Action", "Animation", "Comedy", "Drama", "Horror"};
                for (String genre : popularGenres) {
                    addMovieCategory("Top " + genre, filmDAO.getFilmsByGenre(genre, 10));
                }

                return null;
            }

            @Override
            protected void done() {
                updateContainerSize();
            }
        };
        worker.execute();
    }

    private void addMovieCategory(String categoryTitle, List<Film> films) {
        if (films.isEmpty()) {
            return;
        }

        // Create category panel
        JPanel categoryPanel = new JPanel();
        categoryPanel.setLayout(new BorderLayout());
        categoryPanel.setBackground(new Color(102, 0, 0));
        categoryPanel.setBorder(BorderFactory.createEmptyBorder(0, 0, 20, 0));

        // Add category title
        JLabel titleLabel = new JLabel(categoryTitle);
        titleLabel.setForeground(Color.WHITE);
        titleLabel.setFont(new Font("SansSerif", Font.BOLD, 18));
        titleLabel.setBorder(BorderFactory.createEmptyBorder(0, 10, 10, 0));
        categoryPanel.add(titleLabel, BorderLayout.NORTH);

        // Create horizontal scrolling panel for movies
        JPanel moviesPanel = new JPanel();
        moviesPanel.setLayout(new FlowLayout(FlowLayout.LEFT, 15, 5));
        moviesPanel.setBackground(new Color(102, 0, 0));

        // Add movie cards
        for (Film film : films) {
            MovieCard card = new MovieCard(film, () -> {
                openMovieDetails(film);
            });
            moviesPanel.add(card);
        }

// Create horizontal scroll pane
        JScrollPane horizontalScroll = new JScrollPane(moviesPanel);

// Custom mouse wheel behavior - only scroll horizontally when Shift is pressed
        horizontalScroll.addMouseWheelListener((MouseWheelEvent e) -> {
            if (e.isShiftDown()) {
                JScrollBar hBar = horizontalScroll.getHorizontalScrollBar();
                int amount = e.getUnitsToScroll() * hBar.getUnitIncrement();
                hBar.setValue(hBar.getValue() + amount);
                e.consume(); // prevent vertical scroll
            }
            // If Shift isn't pressed, let the default vertical scrolling happen
        });

        horizontalScroll.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        horizontalScroll.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_NEVER);
        horizontalScroll.setBorder(null);
        horizontalScroll.getViewport().setBackground(new Color(102, 0, 0));
        horizontalScroll.getHorizontalScrollBar().setUnitIncrement(20);

        categoryPanel.add(horizontalScroll, BorderLayout.CENTER);
        moviesContainer.add(categoryPanel);

        // Add some space between categories
        moviesContainer.add(Box.createRigidArea(new Dimension(0, 10)));
    }

    private void updateContainerSize() {
        if (isSearchMode) {
            // Calculate size for search mode (grid layout)
            int componentCount = moviesContainer.getComponentCount();
            if (componentCount == 0) {
                return;
            }

            // Calculate rows and columns based on container width
            int width = moviesScrollPane.getViewport().getWidth() - 20;
            int cardWidth = 220 + 15; // card width + horizontal spacing
            int cardsPerRow = Math.max(1, width / cardWidth);
            int rows = (int) Math.ceil((double) componentCount / cardsPerRow);

            // Calculate total height needed
            int cardHeight = 330 + 15; // card height + vertical spacing
            int totalHeight = rows * cardHeight + 40; // Add extra padding

            moviesContainer.setPreferredSize(new Dimension(width, totalHeight));
        } else {
            // Calculate size for category mode (vertical layout)
            int totalHeight = 0;
            for (Component comp : moviesContainer.getComponents()) {
                if (comp instanceof JPanel) {
                    totalHeight += comp.getPreferredSize().height;
                } else if (comp instanceof Box.Filler) {
                    totalHeight += comp.getPreferredSize().height;
                }
            }

            // Add extra padding
            totalHeight += 40;

            // Set container's preferred size
            int width = moviesScrollPane.getViewport().getWidth() - 20;
            moviesContainer.setPreferredSize(new Dimension(width, totalHeight));
        }

        moviesContainer.revalidate();
    }

    public void componentResized(ComponentEvent e) {
        // Update container width when window is resized
        updateContainerSize();
    }

    private void openMovieDetails(Film film) {
        MovieDetailsDialog detailsDialog = new MovieDetailsDialog(this, film);
        detailsDialog.setVisible(true);
    }

    private void clearSearch() {
        film_searchbar.setText("");
        isSearchMode = false;
        setupMoviesContainer();
        loadMovieCategoriesInBackground();
    }

    // MovieCard inner class
    // <editor-fold defaultstate="collapsed" desc="Moviecard bullshit">   
    class MovieCard extends JPanel {

        private static final int CARD_WIDTH = 220;
        private static final int CARD_HEIGHT = 330;
        private static final Color BG_COLOR = new Color(30, 30, 30);
        private static final Color BORDER_COLOR = new Color(60, 60, 60);
        private static final Color HOVER_COLOR = new Color(255, 215, 0);
        private static final Color TEXT_COLOR = Color.WHITE;

        private final Film film;
        private Timer hoverTimer;
        private float hoverProgress = 0.0f;
        private final JPanel posterPanel;

        public MovieCard(Film film, Runnable onClick) {
            this.film = film;

            // Setup panel properties
            setLayout(new BorderLayout());
            setPreferredSize(new Dimension(CARD_WIDTH, CARD_HEIGHT));
            setBackground(BG_COLOR);
            setBorder(BorderFactory.createCompoundBorder(
                    BorderFactory.createEmptyBorder(5, 5, 5, 5),
                    BorderFactory.createLineBorder(BORDER_COLOR, 1)));
            setToolTipText(film.getTitle());

            // Create components
            posterPanel = createPosterPanel();
            JPanel titlePanel = createTitlePanel();

            // Add components
            add(posterPanel, BorderLayout.CENTER);
            add(titlePanel, BorderLayout.SOUTH);

            // Setup interactions
            setupHoverEffects();
            setupClickHandler(onClick);

            // For screen readers
            getAccessibleContext().setAccessibleName("Movie: " + film.getTitle());
            getAccessibleContext().setAccessibleDescription("Click to see details for " + film.getTitle());
        }

        private JPanel createPosterPanel() {
            JPanel panel = new JPanel(new BorderLayout()) {
                @Override
                protected void paintComponent(Graphics g) {
                    super.paintComponent(g);
                    // Add subtle gradient overlay
                    Graphics2D g2d = (Graphics2D) g.create();
                    g2d.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 0.2f));
                    g2d.setPaint(new GradientPaint(0, 0, new Color(0, 0, 0, 0),
                            0, getHeight(), new Color(0, 0, 0, 100)));
                    g2d.fillRect(0, 0, getWidth(), getHeight());
                    g2d.dispose();
                }
            };
            panel.setPreferredSize(new Dimension(CARD_WIDTH - 10, CARD_HEIGHT - 50));
            panel.setBackground(new Color(20, 20, 20));

            // Add loading indicator
            JLabel loadingLabel = new JLabel("Loading...", SwingConstants.CENTER);
            loadingLabel.setForeground(new Color(150, 150, 150));
            panel.add(loadingLabel, BorderLayout.CENTER);

            // Load image asynchronously
            loadPosterImage(film.getPosterUrl(), panel);

            return panel;
        }

        private JPanel createTitlePanel() {
            JPanel titlePanel = new JPanel(new BorderLayout());
            titlePanel.setBackground(BG_COLOR);
            titlePanel.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));

            // Title with ellipsis if too long
            JLabel titleLabel = new JLabel("<html><center>" + truncateText(film.getTitle(), 30) + "</center></html>");
            titleLabel.setForeground(TEXT_COLOR);
            titleLabel.setFont(new Font("SansSerif", Font.BOLD, 13));
            titleLabel.setHorizontalAlignment(SwingConstants.CENTER);

            titlePanel.add(titleLabel, BorderLayout.CENTER);

            return titlePanel;
        }

        private void loadPosterImage(String imagePath, JPanel container) {
            new SwingWorker<JComponent, Void>() {
                @Override
                protected JComponent doInBackground() {
                    try {
                        PosterDAO posterDAO = new PosterDAO();
                        BufferedImage scaledImage = posterDAO.loadAndScalePoster(imagePath, film.getTitle(), 200, 300);

                        if (scaledImage == null) {
                            return createTextPlaceholder(film.getTitle());
                        }

                        JPanel imagePanel = new JPanel(new GridBagLayout()) {
                            @Override
                            protected void paintComponent(Graphics g) {
                                super.paintComponent(g);
                                int x = (getWidth() - scaledImage.getWidth()) / 2;
                                int y = (getHeight() - scaledImage.getHeight()) / 2;
                                g.drawImage(scaledImage, x, y, this);
                            }
                        };
                        imagePanel.setOpaque(false);
                        imagePanel.setBackground(new Color(0, 0, 0, 0));
                        return imagePanel;
                    } catch (Exception e) {
                        System.err.println("Poster load error: " + e.getMessage());
                        return createErrorPlaceholder();
                    }
                }

                @Override
                protected void done() {
                    try {
                        JComponent result = get();
                        container.removeAll();
                        container.add(result, BorderLayout.CENTER);
                        container.revalidate();
                        container.repaint();
                    } catch (Exception e) {
                        container.removeAll();
                        container.add(createErrorPlaceholder(), BorderLayout.CENTER);
                        container.revalidate();
                        container.repaint();
                    }
                }
            }.execute();
        }

        private JPanel createTextPlaceholder(String title) {
            JPanel placeholder = new JPanel(new GridBagLayout());
            placeholder.setBackground(getRandomDarkColor());

            String letter = title != null && !title.isEmpty()
                    ? title.substring(0, 1).toUpperCase()
                    : "?";

            JLabel letterLabel = new JLabel(letter);
            letterLabel.setFont(new Font("SansSerif", Font.BOLD, 72));
            letterLabel.setForeground(Color.WHITE);
            placeholder.add(letterLabel);

            return placeholder;
        }

        private JPanel createErrorPlaceholder() {
            JPanel placeholder = new JPanel(new GridBagLayout());
            placeholder.setBackground(new Color(40, 40, 40));

            JLabel errorLabel = new JLabel("!");
            errorLabel.setFont(new Font("SansSerif", Font.BOLD, 72));
            errorLabel.setForeground(new Color(255, 100, 100));
            placeholder.add(errorLabel);

            return placeholder;
        }

        private Color getRandomDarkColor() {
            // Generate aesthetic movie-themed colors
            Color[] colors = {
                new Color(41, 128, 185), // Blue
                new Color(155, 89, 182), // Purple
                new Color(192, 57, 43), // Red
                new Color(39, 174, 96), // Green
                new Color(211, 84, 0), // Orange
                new Color(52, 73, 94) // Dark Blue
            };
            return colors[new Random().nextInt(colors.length)];
        }

        private String truncateText(String text, int maxLength) {
            if (text == null) {
                return "";
            }
            return text.length() > maxLength ? text.substring(0, maxLength - 3) + "..." : text;
        }

        private void setupHoverEffects() {
            // Create animation timer
            hoverTimer = new Timer(10, e -> {
                if (isHovered()) {
                    hoverProgress = Math.min(1.0f, hoverProgress + 0.05f);
                } else {
                    hoverProgress = Math.max(0.0f, hoverProgress - 0.05f);
                }

                // Apply hover effects based on progress
                float intensity = easeInOut(hoverProgress);

                // Interpolate border color
                Color currentBorderColor = interpolateColor(BORDER_COLOR, HOVER_COLOR, intensity);
                setBorder(BorderFactory.createCompoundBorder(
                        BorderFactory.createEmptyBorder(5, 5, 5, 5),
                        BorderFactory.createLineBorder(currentBorderColor, intensity < 0.5 ? 1 : 2)
                ));

                // Scale effect (subtle)
                float scale = 1.0f + (0.02f * intensity);
                setSize((int) (CARD_WIDTH * scale), (int) (CARD_HEIGHT * scale));

                // Stop timer when animation is complete
                if ((isHovered() && hoverProgress >= 1.0f) || (!isHovered() && hoverProgress <= 0.0f)) {
                    ((Timer) e.getSource()).stop();
                }

                repaint();
            });

            addMouseListener(new MouseAdapter() {
                public void mouseEntered(MouseEvent e) {
                    setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
                    if (!hoverTimer.isRunning()) {
                        hoverTimer.start();
                    }
                }

                public void mouseExited(MouseEvent e) {
                    setCursor(Cursor.getDefaultCursor());
                    if (!hoverTimer.isRunning()) {
                        hoverTimer.start();
                    }
                }
            });
        }

        private boolean isHovered() {
            Point p = MouseInfo.getPointerInfo().getLocation();
            SwingUtilities.convertPointFromScreen(p, this);
            return contains(p);
        }

        private float easeInOut(float t) {
            // Cubic ease in-out function for smooth animation
            return t < 0.5 ? 4 * t * t * t : 1 - (float) Math.pow(-2 * t + 2, 3) / 2;
        }

        private Color interpolateColor(Color c1, Color c2, float ratio) {
            int r = (int) (c1.getRed() + (c2.getRed() - c1.getRed()) * ratio);
            int g = (int) (c1.getGreen() + (c2.getGreen() - c1.getGreen()) * ratio);
            int b = (int) (c1.getBlue() + (c2.getBlue() - c1.getBlue()) * ratio);
            return new Color(r, g, b);
        }

        private void setupClickHandler(Runnable onClick) {
            addMouseListener(new MouseAdapter() {
                public void mouseClicked(MouseEvent e) {
                    // Add click effect
                    JPanel flashPanel = new JPanel();
                    flashPanel.setBackground(new Color(255, 255, 255, 80));
                    flashPanel.setBounds(0, 0, getWidth(), getHeight());
                    add(flashPanel, 0);

                    // Remove the flash panel after a short delay
                    Timer timer = new Timer(100, event -> {
                        remove(flashPanel);
                        repaint();
                        onClick.run();
                    });
                    timer.setRepeats(false);
                    timer.start();
                }
            });
        }

        // Additional helper methods that can be used if needed
        public Film getFilm() {
            return film;
        }

        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);

        }
    }
// </editor-fold> 

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Homepage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Homepage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Homepage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Homepage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        try {
            javax.swing.UIManager.setLookAndFeel(new FlatDarkLaf());  // Use FlatLaf
        } catch (UnsupportedLookAndFeelException ex) {
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Homepage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Menubar;
    private javax.swing.JTextField film_searchbar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel moviesContainer;
    private javax.swing.JScrollPane moviesScrollPane;
    private javax.swing.JLabel welcome;
    // End of variables declaration//GEN-END:variables
}
