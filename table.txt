-- First, drop existing tables (in reverse order of dependencies)
DROP VIEW IF EXISTS available_seats;
DROP TABLE IF EXISTS booking;
DROP TABLE IF EXISTS seat;
DROP TABLE IF EXISTS screening_schedule;
DROP TABLE IF EXISTS film;
DROP TABLE IF EXISTS screen;
DROP TABLE IF EXISTS customer;

-- Create customer table with proper constraints
CREATE TABLE customer (
    customer_id INT(11) NOT NULL AUTO_INCREMENT,
    username VARCHAR(255) NOT NULL,
    email VARCHAR(100) NOT NULL,
    phone_number VARCHAR(15),
    password VARCHAR(255),
    role VARCHAR(10) DEFAULT 'user',
    PRIMARY KEY (customer_id),
    UNIQUE KEY (username),
    UNIQUE KEY (email)
) ENGINE=InnoDB;

-- Create film table with proper constraints
CREATE TABLE film (
    film_id INT(11) NOT NULL AUTO_INCREMENT,
    title VARCHAR(255) NOT NULL,
    genre VARCHAR(100),
    duration INT(11),
    synopsis TEXT,
    poster_url VARCHAR(255),
    release_date DATE,
    rating DECIMAL(3,1) DEFAULT 0.0,
    PRIMARY KEY (film_id)
) ENGINE=InnoDB;

-- Create screen table with corrected varchar(50) and proper constraints
CREATE TABLE screen (
    screen_id INT(11) NOT NULL AUTO_INCREMENT,
    screen_name VARCHAR(50) NOT NULL,
    capacity INT(11) NOT NULL,
    PRIMARY KEY (screen_id)
) ENGINE=InnoDB;

-- Create screening_schedule table with proper foreign key and NOT NULL constraints
CREATE TABLE screening_schedule (
    schedule_id INT(11) NOT NULL AUTO_INCREMENT,
    film_id INT(11) NOT NULL,
    screen_id INT(11) NOT NULL,
    screening_date DATE NOT NULL,
    screening_time TIME NOT NULL,
    PRIMARY KEY (schedule_id),
    FOREIGN KEY (film_id) REFERENCES film(film_id) ON UPDATE RESTRICT ON DELETE RESTRICT,
    FOREIGN KEY (screen_id) REFERENCES screen(screen_id) ON UPDATE RESTRICT ON DELETE RESTRICT,
    INDEX (screening_date, screening_time)
) ENGINE=InnoDB;

-- Create seat table with proper foreign keys and constraints
CREATE TABLE seat (
    seat_id INT(11) NOT NULL AUTO_INCREMENT,
    screen_id INT(11) NOT NULL,
    row_letter CHAR(1) NOT NULL,
    seat_number INT(11) NOT NULL,
    status VARCHAR(20) DEFAULT 'available',
    price DECIMAL(10,2) DEFAULT 50.00,
    PRIMARY KEY (seat_id),
    FOREIGN KEY (screen_id) REFERENCES screen(screen_id) ON UPDATE RESTRICT ON DELETE RESTRICT,
    UNIQUE KEY (screen_id, row_letter, seat_number)
) ENGINE=InnoDB;

-- Create booking table with proper foreign keys and NOT NULL constraints
CREATE TABLE booking (
    booking_id INT(11) NOT NULL AUTO_INCREMENT,
    customer_id INT(11) NOT NULL,
    seat_id INT(11) NOT NULL,
    schedule_id INT(11) NOT NULL,
    payment_method VARCHAR(50) NOT NULL,
    total_price DECIMAL(10,2) NOT NULL,
    payment_status VARCHAR(20) NOT NULL DEFAULT 'pending',
    booking_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (booking_id),
    FOREIGN KEY (customer_id) REFERENCES customer(customer_id) ON UPDATE RESTRICT ON DELETE RESTRICT,
    FOREIGN KEY (seat_id) REFERENCES seat(seat_id) ON UPDATE RESTRICT ON DELETE RESTRICT,
    FOREIGN KEY (schedule_id) REFERENCES screening_schedule(schedule_id) ON UPDATE RESTRICT ON DELETE RESTRICT
) ENGINE=InnoDB;

-- Create available_seats view with proper definition
CREATE VIEW available_seats AS
SELECT 
    s.seat_id,
    s.screen_id,
    s.row_letter,
    s.seat_number,
    s.price,
    sc.screening_date,
    sc.screening_time,
    f.title AS film_title
FROM 
    seat s
JOIN 
    screening_schedule sc ON s.screen_id = sc.screen_id
JOIN 
    film f ON sc.film_id = f.film_id
LEFT JOIN 
    booking b ON s.seat_id = b.seat_id AND sc.schedule_id = b.schedule_id
WHERE 
    s.status = 'available' AND b.booking_id IS NULL;